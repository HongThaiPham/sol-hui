/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCancelGroupInstruction,
  type ParsedClaimEmergencyRefundInstruction,
  type ParsedCommitRandomnessInstruction,
  type ParsedContributeInstruction,
  type ParsedCreateGroupInstruction,
  type ParsedDistributeFundsInstruction,
  type ParsedDistributeInterestInstruction,
  type ParsedEmergencyPauseInstruction,
  type ParsedEmergencyResumeInstruction,
  type ParsedFinalizeRoundInstruction,
  type ParsedGetAuctionStatisticsInstruction,
  type ParsedGetGroupStatisticsInstruction,
  type ParsedGetMemberStatisticsInstruction,
  type ParsedGetRoundStatisticsInstruction,
  type ParsedInitializeInstruction,
  type ParsedInitiateEmergencyRefundInstruction,
  type ParsedJoinGroupInstruction,
  type ParsedLeaveGroupInstruction,
  type ParsedPlaceBidInstruction,
  type ParsedProcessPartialRefundInstruction,
  type ParsedResetMembersForNewRoundInstruction,
  type ParsedSelectWinnerInstruction,
  type ParsedSettleRandomnessInstruction,
  type ParsedStartAuctionInstruction,
  type ParsedStartGroupInstruction,
  type ParsedStartRoundInstruction,
  type ParsedUpdateGroupConfigInstruction,
} from '../instructions';

export const SONTINE_PROGRAM_ADDRESS =
  'GorkwbJYHK36X3nmEu9RY8rgZ9sFnudx9voNQskjiF67' as Address<'GorkwbJYHK36X3nmEu9RY8rgZ9sFnudx9voNQskjiF67'>;

export enum SontineAccount {
  AuctionRound,
  Group,
  Member,
  Round,
}

export function identifySontineAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SontineAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 35, 83, 13, 200, 67, 45, 96])
      ),
      0
    )
  ) {
    return SontineAccount.AuctionRound;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([209, 249, 208, 63, 182, 89, 186, 254])
      ),
      0
    )
  ) {
    return SontineAccount.Group;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 19, 162, 21, 29, 166, 17, 198])
      ),
      0
    )
  ) {
    return SontineAccount.Member;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 127, 165, 51, 73, 78, 116, 174])
      ),
      0
    )
  ) {
    return SontineAccount.Round;
  }
  throw new Error(
    'The provided account could not be identified as a sontine account.'
  );
}

export enum SontineInstruction {
  CancelGroup,
  ClaimEmergencyRefund,
  CommitRandomness,
  Contribute,
  CreateGroup,
  DistributeFunds,
  DistributeInterest,
  EmergencyPause,
  EmergencyResume,
  FinalizeRound,
  GetAuctionStatistics,
  GetGroupStatistics,
  GetMemberStatistics,
  GetRoundStatistics,
  Initialize,
  InitiateEmergencyRefund,
  JoinGroup,
  LeaveGroup,
  PlaceBid,
  ProcessPartialRefund,
  ResetMembersForNewRound,
  SelectWinner,
  SettleRandomness,
  StartAuction,
  StartGroup,
  StartRound,
  UpdateGroupConfig,
}

export function identifySontineInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SontineInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 172, 216, 128, 155, 75, 12, 110])
      ),
      0
    )
  ) {
    return SontineInstruction.CancelGroup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 43, 46, 219, 83, 211, 152, 172])
      ),
      0
    )
  ) {
    return SontineInstruction.ClaimEmergencyRefund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([146, 52, 195, 220, 79, 30, 53, 26])
      ),
      0
    )
  ) {
    return SontineInstruction.CommitRandomness;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([82, 33, 68, 131, 32, 0, 205, 95])
      ),
      0
    )
  ) {
    return SontineInstruction.Contribute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([79, 60, 158, 134, 61, 199, 56, 248])
      ),
      0
    )
  ) {
    return SontineInstruction.CreateGroup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 82, 187, 45, 224, 209, 31, 156])
      ),
      0
    )
  ) {
    return SontineInstruction.DistributeFunds;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 80, 239, 247, 115, 254, 122, 80])
      ),
      0
    )
  ) {
    return SontineInstruction.DistributeInterest;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 143, 27, 142, 200, 181, 210, 255])
      ),
      0
    )
  ) {
    return SontineInstruction.EmergencyPause;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 243, 48, 185, 6, 73, 190, 83])
      ),
      0
    )
  ) {
    return SontineInstruction.EmergencyResume;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([239, 160, 254, 11, 254, 144, 53, 148])
      ),
      0
    )
  ) {
    return SontineInstruction.FinalizeRound;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 85, 235, 166, 72, 205, 128, 95])
      ),
      0
    )
  ) {
    return SontineInstruction.GetAuctionStatistics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 215, 137, 171, 153, 47, 171, 76])
      ),
      0
    )
  ) {
    return SontineInstruction.GetGroupStatistics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 132, 61, 98, 78, 20, 135, 206])
      ),
      0
    )
  ) {
    return SontineInstruction.GetMemberStatistics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([81, 92, 171, 144, 144, 88, 192, 248])
      ),
      0
    )
  ) {
    return SontineInstruction.GetRoundStatistics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return SontineInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([239, 254, 190, 249, 140, 67, 187, 37])
      ),
      0
    )
  ) {
    return SontineInstruction.InitiateEmergencyRefund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 56, 199, 19, 250, 70, 44, 184])
      ),
      0
    )
  ) {
    return SontineInstruction.JoinGroup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 4, 125, 28, 46, 23, 233, 29])
      ),
      0
    )
  ) {
    return SontineInstruction.LeaveGroup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 77, 148, 91, 200, 151, 92, 146])
      ),
      0
    )
  ) {
    return SontineInstruction.PlaceBid;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 2, 45, 239, 179, 132, 197, 213])
      ),
      0
    )
  ) {
    return SontineInstruction.ProcessPartialRefund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 99, 246, 42, 240, 170, 182, 215])
      ),
      0
    )
  ) {
    return SontineInstruction.ResetMembersForNewRound;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 66, 44, 236, 79, 158, 82, 51])
      ),
      0
    )
  ) {
    return SontineInstruction.SelectWinner;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([209, 111, 84, 239, 14, 4, 26, 251])
      ),
      0
    )
  ) {
    return SontineInstruction.SettleRandomness;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 2, 149, 136, 148, 125, 65, 195])
      ),
      0
    )
  ) {
    return SontineInstruction.StartAuction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 125, 134, 7, 156, 15, 173, 1])
      ),
      0
    )
  ) {
    return SontineInstruction.StartGroup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 144, 43, 7, 193, 42, 217, 215])
      ),
      0
    )
  ) {
    return SontineInstruction.StartRound;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([237, 22, 68, 139, 99, 160, 215, 91])
      ),
      0
    )
  ) {
    return SontineInstruction.UpdateGroupConfig;
  }
  throw new Error(
    'The provided instruction could not be identified as a sontine instruction.'
  );
}

export type ParsedSontineInstruction<
  TProgram extends string = 'GorkwbJYHK36X3nmEu9RY8rgZ9sFnudx9voNQskjiF67',
> =
  | ({
      instructionType: SontineInstruction.CancelGroup;
    } & ParsedCancelGroupInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.ClaimEmergencyRefund;
    } & ParsedClaimEmergencyRefundInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.CommitRandomness;
    } & ParsedCommitRandomnessInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.Contribute;
    } & ParsedContributeInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.CreateGroup;
    } & ParsedCreateGroupInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.DistributeFunds;
    } & ParsedDistributeFundsInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.DistributeInterest;
    } & ParsedDistributeInterestInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.EmergencyPause;
    } & ParsedEmergencyPauseInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.EmergencyResume;
    } & ParsedEmergencyResumeInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.FinalizeRound;
    } & ParsedFinalizeRoundInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.GetAuctionStatistics;
    } & ParsedGetAuctionStatisticsInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.GetGroupStatistics;
    } & ParsedGetGroupStatisticsInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.GetMemberStatistics;
    } & ParsedGetMemberStatisticsInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.GetRoundStatistics;
    } & ParsedGetRoundStatisticsInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.InitiateEmergencyRefund;
    } & ParsedInitiateEmergencyRefundInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.JoinGroup;
    } & ParsedJoinGroupInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.LeaveGroup;
    } & ParsedLeaveGroupInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.PlaceBid;
    } & ParsedPlaceBidInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.ProcessPartialRefund;
    } & ParsedProcessPartialRefundInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.ResetMembersForNewRound;
    } & ParsedResetMembersForNewRoundInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.SelectWinner;
    } & ParsedSelectWinnerInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.SettleRandomness;
    } & ParsedSettleRandomnessInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.StartAuction;
    } & ParsedStartAuctionInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.StartGroup;
    } & ParsedStartGroupInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.StartRound;
    } & ParsedStartRoundInstruction<TProgram>)
  | ({
      instructionType: SontineInstruction.UpdateGroupConfig;
    } & ParsedUpdateGroupConfigInstruction<TProgram>);
