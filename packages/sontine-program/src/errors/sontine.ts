/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';

/** Unauthorized: Unauthorized access to group */
export const SONTINE_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** GroupFull: Group is full */
export const SONTINE_ERROR__GROUP_FULL = 0x1771; // 6001
/** CannotStartGroup: Group cannot be started */
export const SONTINE_ERROR__CANNOT_START_GROUP = 0x1772; // 6002
/** GroupNotActive: Group is not active */
export const SONTINE_ERROR__GROUP_NOT_ACTIVE = 0x1773; // 6003
/** GroupPaused: Group is paused */
export const SONTINE_ERROR__GROUP_PAUSED = 0x1774; // 6004
/** InvalidSelectionMethod: Invalid selection method */
export const SONTINE_ERROR__INVALID_SELECTION_METHOD = 0x1775; // 6005
/** GroupAlreadyStarted: Group already started */
export const SONTINE_ERROR__GROUP_ALREADY_STARTED = 0x1776; // 6006
/** GroupNotFound: Group not found */
export const SONTINE_ERROR__GROUP_NOT_FOUND = 0x1777; // 6007
/** MemberNotActive: Member not active */
export const SONTINE_ERROR__MEMBER_NOT_ACTIVE = 0x1778; // 6008
/** MemberAlreadyExists: Member already exists */
export const SONTINE_ERROR__MEMBER_ALREADY_EXISTS = 0x1779; // 6009
/** MemberNotFound: Member not found */
export const SONTINE_ERROR__MEMBER_NOT_FOUND = 0x177a; // 6010
/** MemberAlreadyReceived: Member already received payout */
export const SONTINE_ERROR__MEMBER_ALREADY_RECEIVED = 0x177b; // 6011
/** AlreadyContributed: Member already contributed this round */
export const SONTINE_ERROR__ALREADY_CONTRIBUTED = 0x177c; // 6012
/** NoEligibleMembers: No eligible members */
export const SONTINE_ERROR__NO_ELIGIBLE_MEMBERS = 0x177d; // 6013
/** RoundNotAcceptingContributions: Round not accepting contributions */
export const SONTINE_ERROR__ROUND_NOT_ACCEPTING_CONTRIBUTIONS = 0x177e; // 6014
/** InvalidRoundStatus: Invalid round status */
export const SONTINE_ERROR__INVALID_ROUND_STATUS = 0x177f; // 6015
/** RoundNotCompleted: Round not completed */
export const SONTINE_ERROR__ROUND_NOT_COMPLETED = 0x1780; // 6016
/** NotReadyForSelection: Not ready for selection */
export const SONTINE_ERROR__NOT_READY_FOR_SELECTION = 0x1781; // 6017
/** NoMemberSelected: No member selected */
export const SONTINE_ERROR__NO_MEMBER_SELECTED = 0x1782; // 6018
/** RoundAlreadyExists: Round already exists */
export const SONTINE_ERROR__ROUND_ALREADY_EXISTS = 0x1783; // 6019
/** AuctionNotActive: Auction not active */
export const SONTINE_ERROR__AUCTION_NOT_ACTIVE = 0x1784; // 6020
/** AuctionStillActive: Auction still active */
export const SONTINE_ERROR__AUCTION_STILL_ACTIVE = 0x1785; // 6021
/** AuctionFinalized: Auction finalized */
export const SONTINE_ERROR__AUCTION_FINALIZED = 0x1786; // 6022
/** BidTooLow: Bid too low */
export const SONTINE_ERROR__BID_TOO_LOW = 0x1787; // 6023
/** InvalidBidAmount: Invalid bid amount */
export const SONTINE_ERROR__INVALID_BID_AMOUNT = 0x1788; // 6024
/** InvalidContributionAmount: Invalid contribution amount */
export const SONTINE_ERROR__INVALID_CONTRIBUTION_AMOUNT = 0x1789; // 6025
/** InsufficientFunds: Insufficient funds */
export const SONTINE_ERROR__INSUFFICIENT_FUNDS = 0x178a; // 6026
/** InvalidAmount: Invalid amount */
export const SONTINE_ERROR__INVALID_AMOUNT = 0x178b; // 6027
/** TooEarly: Too early */
export const SONTINE_ERROR__TOO_EARLY = 0x178c; // 6028
/** TooLate: Too late */
export const SONTINE_ERROR__TOO_LATE = 0x178d; // 6029
/** InvalidTiming: Invalid timing */
export const SONTINE_ERROR__INVALID_TIMING = 0x178e; // 6030
/** InvalidConfiguration: Invalid configuration */
export const SONTINE_ERROR__INVALID_CONFIGURATION = 0x178f; // 6031
/** InvalidMaxMembers: Invalid max members */
export const SONTINE_ERROR__INVALID_MAX_MEMBERS = 0x1790; // 6032
/** InvalidCycleDuration: Invalid cycle duration */
export const SONTINE_ERROR__INVALID_CYCLE_DURATION = 0x1791; // 6033
/** MathOverflow: Math overflow */
export const SONTINE_ERROR__MATH_OVERFLOW = 0x1792; // 6034
/** DivisionByZero: Division by zero */
export const SONTINE_ERROR__DIVISION_BY_ZERO = 0x1793; // 6035
/** InvalidState: Invalid state */
export const SONTINE_ERROR__INVALID_STATE = 0x1794; // 6036
/** OperationNotAllowed: Operation not allowed */
export const SONTINE_ERROR__OPERATION_NOT_ALLOWED = 0x1795; // 6037
/** AccountMismatch: Account mismatch */
export const SONTINE_ERROR__ACCOUNT_MISMATCH = 0x1796; // 6038
/** InvalidAccount: Invalid account */
export const SONTINE_ERROR__INVALID_ACCOUNT = 0x1797; // 6039
/** RandomnessAlreadyRequested: Randomness already requested */
export const SONTINE_ERROR__RANDOMNESS_ALREADY_REQUESTED = 0x1798; // 6040
/** RandomnessNotCommitted: Randomness not committed */
export const SONTINE_ERROR__RANDOMNESS_NOT_COMMITTED = 0x1799; // 6041
/** RandomnessNotRevealed: Randomness not revealed */
export const SONTINE_ERROR__RANDOMNESS_NOT_REVEALED = 0x179a; // 6042
/** InvalidRandomnessAccount: Invalid randomness account */
export const SONTINE_ERROR__INVALID_RANDOMNESS_ACCOUNT = 0x179b; // 6043
/** InvalidRandomnessSlot: Invalid randomness slot */
export const SONTINE_ERROR__INVALID_RANDOMNESS_SLOT = 0x179c; // 6044
/** RandomnessAlreadyRevealed: Randomness already revealed */
export const SONTINE_ERROR__RANDOMNESS_ALREADY_REVEALED = 0x179d; // 6045

export type SontineError =
  | typeof SONTINE_ERROR__ACCOUNT_MISMATCH
  | typeof SONTINE_ERROR__ALREADY_CONTRIBUTED
  | typeof SONTINE_ERROR__AUCTION_FINALIZED
  | typeof SONTINE_ERROR__AUCTION_NOT_ACTIVE
  | typeof SONTINE_ERROR__AUCTION_STILL_ACTIVE
  | typeof SONTINE_ERROR__BID_TOO_LOW
  | typeof SONTINE_ERROR__CANNOT_START_GROUP
  | typeof SONTINE_ERROR__DIVISION_BY_ZERO
  | typeof SONTINE_ERROR__GROUP_ALREADY_STARTED
  | typeof SONTINE_ERROR__GROUP_FULL
  | typeof SONTINE_ERROR__GROUP_NOT_ACTIVE
  | typeof SONTINE_ERROR__GROUP_NOT_FOUND
  | typeof SONTINE_ERROR__GROUP_PAUSED
  | typeof SONTINE_ERROR__INSUFFICIENT_FUNDS
  | typeof SONTINE_ERROR__INVALID_ACCOUNT
  | typeof SONTINE_ERROR__INVALID_AMOUNT
  | typeof SONTINE_ERROR__INVALID_BID_AMOUNT
  | typeof SONTINE_ERROR__INVALID_CONFIGURATION
  | typeof SONTINE_ERROR__INVALID_CONTRIBUTION_AMOUNT
  | typeof SONTINE_ERROR__INVALID_CYCLE_DURATION
  | typeof SONTINE_ERROR__INVALID_MAX_MEMBERS
  | typeof SONTINE_ERROR__INVALID_RANDOMNESS_ACCOUNT
  | typeof SONTINE_ERROR__INVALID_RANDOMNESS_SLOT
  | typeof SONTINE_ERROR__INVALID_ROUND_STATUS
  | typeof SONTINE_ERROR__INVALID_SELECTION_METHOD
  | typeof SONTINE_ERROR__INVALID_STATE
  | typeof SONTINE_ERROR__INVALID_TIMING
  | typeof SONTINE_ERROR__MATH_OVERFLOW
  | typeof SONTINE_ERROR__MEMBER_ALREADY_EXISTS
  | typeof SONTINE_ERROR__MEMBER_ALREADY_RECEIVED
  | typeof SONTINE_ERROR__MEMBER_NOT_ACTIVE
  | typeof SONTINE_ERROR__MEMBER_NOT_FOUND
  | typeof SONTINE_ERROR__NO_ELIGIBLE_MEMBERS
  | typeof SONTINE_ERROR__NO_MEMBER_SELECTED
  | typeof SONTINE_ERROR__NOT_READY_FOR_SELECTION
  | typeof SONTINE_ERROR__OPERATION_NOT_ALLOWED
  | typeof SONTINE_ERROR__RANDOMNESS_ALREADY_REQUESTED
  | typeof SONTINE_ERROR__RANDOMNESS_ALREADY_REVEALED
  | typeof SONTINE_ERROR__RANDOMNESS_NOT_COMMITTED
  | typeof SONTINE_ERROR__RANDOMNESS_NOT_REVEALED
  | typeof SONTINE_ERROR__ROUND_ALREADY_EXISTS
  | typeof SONTINE_ERROR__ROUND_NOT_ACCEPTING_CONTRIBUTIONS
  | typeof SONTINE_ERROR__ROUND_NOT_COMPLETED
  | typeof SONTINE_ERROR__TOO_EARLY
  | typeof SONTINE_ERROR__TOO_LATE
  | typeof SONTINE_ERROR__UNAUTHORIZED;

let sontineErrorMessages: Record<SontineError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  sontineErrorMessages = {
    [SONTINE_ERROR__ACCOUNT_MISMATCH]: `Account mismatch`,
    [SONTINE_ERROR__ALREADY_CONTRIBUTED]: `Member already contributed this round`,
    [SONTINE_ERROR__AUCTION_FINALIZED]: `Auction finalized`,
    [SONTINE_ERROR__AUCTION_NOT_ACTIVE]: `Auction not active`,
    [SONTINE_ERROR__AUCTION_STILL_ACTIVE]: `Auction still active`,
    [SONTINE_ERROR__BID_TOO_LOW]: `Bid too low`,
    [SONTINE_ERROR__CANNOT_START_GROUP]: `Group cannot be started`,
    [SONTINE_ERROR__DIVISION_BY_ZERO]: `Division by zero`,
    [SONTINE_ERROR__GROUP_ALREADY_STARTED]: `Group already started`,
    [SONTINE_ERROR__GROUP_FULL]: `Group is full`,
    [SONTINE_ERROR__GROUP_NOT_ACTIVE]: `Group is not active`,
    [SONTINE_ERROR__GROUP_NOT_FOUND]: `Group not found`,
    [SONTINE_ERROR__GROUP_PAUSED]: `Group is paused`,
    [SONTINE_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds`,
    [SONTINE_ERROR__INVALID_ACCOUNT]: `Invalid account`,
    [SONTINE_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [SONTINE_ERROR__INVALID_BID_AMOUNT]: `Invalid bid amount`,
    [SONTINE_ERROR__INVALID_CONFIGURATION]: `Invalid configuration`,
    [SONTINE_ERROR__INVALID_CONTRIBUTION_AMOUNT]: `Invalid contribution amount`,
    [SONTINE_ERROR__INVALID_CYCLE_DURATION]: `Invalid cycle duration`,
    [SONTINE_ERROR__INVALID_MAX_MEMBERS]: `Invalid max members`,
    [SONTINE_ERROR__INVALID_RANDOMNESS_ACCOUNT]: `Invalid randomness account`,
    [SONTINE_ERROR__INVALID_RANDOMNESS_SLOT]: `Invalid randomness slot`,
    [SONTINE_ERROR__INVALID_ROUND_STATUS]: `Invalid round status`,
    [SONTINE_ERROR__INVALID_SELECTION_METHOD]: `Invalid selection method`,
    [SONTINE_ERROR__INVALID_STATE]: `Invalid state`,
    [SONTINE_ERROR__INVALID_TIMING]: `Invalid timing`,
    [SONTINE_ERROR__MATH_OVERFLOW]: `Math overflow`,
    [SONTINE_ERROR__MEMBER_ALREADY_EXISTS]: `Member already exists`,
    [SONTINE_ERROR__MEMBER_ALREADY_RECEIVED]: `Member already received payout`,
    [SONTINE_ERROR__MEMBER_NOT_ACTIVE]: `Member not active`,
    [SONTINE_ERROR__MEMBER_NOT_FOUND]: `Member not found`,
    [SONTINE_ERROR__NO_ELIGIBLE_MEMBERS]: `No eligible members`,
    [SONTINE_ERROR__NO_MEMBER_SELECTED]: `No member selected`,
    [SONTINE_ERROR__NOT_READY_FOR_SELECTION]: `Not ready for selection`,
    [SONTINE_ERROR__OPERATION_NOT_ALLOWED]: `Operation not allowed`,
    [SONTINE_ERROR__RANDOMNESS_ALREADY_REQUESTED]: `Randomness already requested`,
    [SONTINE_ERROR__RANDOMNESS_ALREADY_REVEALED]: `Randomness already revealed`,
    [SONTINE_ERROR__RANDOMNESS_NOT_COMMITTED]: `Randomness not committed`,
    [SONTINE_ERROR__RANDOMNESS_NOT_REVEALED]: `Randomness not revealed`,
    [SONTINE_ERROR__ROUND_ALREADY_EXISTS]: `Round already exists`,
    [SONTINE_ERROR__ROUND_NOT_ACCEPTING_CONTRIBUTIONS]: `Round not accepting contributions`,
    [SONTINE_ERROR__ROUND_NOT_COMPLETED]: `Round not completed`,
    [SONTINE_ERROR__TOO_EARLY]: `Too early`,
    [SONTINE_ERROR__TOO_LATE]: `Too late`,
    [SONTINE_ERROR__UNAUTHORIZED]: `Unauthorized access to group`,
  };
}

export function getSontineErrorMessage(code: SontineError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (sontineErrorMessages as Record<SontineError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSontineError<TProgramErrorCode extends SontineError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SONTINE_PROGRAM_ADDRESS,
    code
  );
}
