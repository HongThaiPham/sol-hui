/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PLACE_BID_DISCRIMINATOR = new Uint8Array([
  238, 77, 148, 91, 200, 151, 92, 146,
]);

export function getPlaceBidDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PLACE_BID_DISCRIMINATOR);
}

export type PlaceBidInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountAuctionRound extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? ReadonlyAccount<TAccountGroup>
        : TAccountGroup,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountAuctionRound extends string
        ? WritableAccount<TAccountAuctionRound>
        : TAccountAuctionRound,
      TAccountMember extends string
        ? WritableSignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      ...TRemainingAccounts,
    ]
  >;

export type PlaceBidInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
  bidAmount: number;
};

export type PlaceBidInstructionDataArgs = {
  roundNumber: number;
  bidAmount: number;
};

export function getPlaceBidInstructionDataEncoder(): FixedSizeEncoder<PlaceBidInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
      ['bidAmount', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PLACE_BID_DISCRIMINATOR })
  );
}

export function getPlaceBidInstructionDataDecoder(): FixedSizeDecoder<PlaceBidInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
    ['bidAmount', getU16Decoder()],
  ]);
}

export function getPlaceBidInstructionDataCodec(): FixedSizeCodec<
  PlaceBidInstructionDataArgs,
  PlaceBidInstructionData
> {
  return combineCodec(
    getPlaceBidInstructionDataEncoder(),
    getPlaceBidInstructionDataDecoder()
  );
}

export type PlaceBidAsyncInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountAuctionRound extends string = string,
  TAccountMember extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  auctionRound?: Address<TAccountAuctionRound>;
  member: TransactionSigner<TAccountMember>;
  roundNumber: PlaceBidInstructionDataArgs['roundNumber'];
  bidAmount: PlaceBidInstructionDataArgs['bidAmount'];
};

export async function getPlaceBidInstructionAsync<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountAuctionRound extends string,
  TAccountMember extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: PlaceBidAsyncInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountAuctionRound,
    TAccountMember
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PlaceBidInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountAuctionRound,
    TAccountMember
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    auctionRound: { value: input.auctionRound ?? null, isWritable: true },
    member: { value: input.member ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.auctionRound.value) {
    accounts.auctionRound.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 99, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.auctionRound),
      getAccountMeta(accounts.member),
    ],
    programAddress,
    data: getPlaceBidInstructionDataEncoder().encode(
      args as PlaceBidInstructionDataArgs
    ),
  } as PlaceBidInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountAuctionRound,
    TAccountMember
  >;

  return instruction;
}

export type PlaceBidInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountAuctionRound extends string = string,
  TAccountMember extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  auctionRound: Address<TAccountAuctionRound>;
  member: TransactionSigner<TAccountMember>;
  roundNumber: PlaceBidInstructionDataArgs['roundNumber'];
  bidAmount: PlaceBidInstructionDataArgs['bidAmount'];
};

export function getPlaceBidInstruction<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountAuctionRound extends string,
  TAccountMember extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: PlaceBidInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountAuctionRound,
    TAccountMember
  >,
  config?: { programAddress?: TProgramAddress }
): PlaceBidInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountMemberAccount,
  TAccountAuctionRound,
  TAccountMember
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    auctionRound: { value: input.auctionRound ?? null, isWritable: true },
    member: { value: input.member ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.auctionRound),
      getAccountMeta(accounts.member),
    ],
    programAddress,
    data: getPlaceBidInstructionDataEncoder().encode(
      args as PlaceBidInstructionDataArgs
    ),
  } as PlaceBidInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountAuctionRound,
    TAccountMember
  >;

  return instruction;
}

export type ParsedPlaceBidInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    memberAccount: TAccountMetas[1];
    auctionRound: TAccountMetas[2];
    member: TAccountMetas[3];
  };
  data: PlaceBidInstructionData;
};

export function parsePlaceBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPlaceBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      memberAccount: getNextAccount(),
      auctionRound: getNextAccount(),
      member: getNextAccount(),
    },
    data: getPlaceBidInstructionDataDecoder().decode(instruction.data),
  };
}
