/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LEAVE_GROUP_DISCRIMINATOR = new Uint8Array([
  10, 4, 125, 28, 46, 23, 233, 29,
]);

export function getLeaveGroupDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LEAVE_GROUP_DISCRIMINATOR);
}

export type LeaveGroupInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountMember extends string
        ? WritableSignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      ...TRemainingAccounts,
    ]
  >;

export type LeaveGroupInstructionData = { discriminator: ReadonlyUint8Array };

export type LeaveGroupInstructionDataArgs = {};

export function getLeaveGroupInstructionDataEncoder(): FixedSizeEncoder<LeaveGroupInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: LEAVE_GROUP_DISCRIMINATOR })
  );
}

export function getLeaveGroupInstructionDataDecoder(): FixedSizeDecoder<LeaveGroupInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getLeaveGroupInstructionDataCodec(): FixedSizeCodec<
  LeaveGroupInstructionDataArgs,
  LeaveGroupInstructionData
> {
  return combineCodec(
    getLeaveGroupInstructionDataEncoder(),
    getLeaveGroupInstructionDataDecoder()
  );
}

export type LeaveGroupInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountMember extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  member: TransactionSigner<TAccountMember>;
};

export function getLeaveGroupInstruction<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountMember extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: LeaveGroupInput<TAccountGroup, TAccountMemberAccount, TAccountMember>,
  config?: { programAddress?: TProgramAddress }
): LeaveGroupInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountMemberAccount,
  TAccountMember
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    member: { value: input.member ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.member),
    ],
    programAddress,
    data: getLeaveGroupInstructionDataEncoder().encode({}),
  } as LeaveGroupInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountMember
  >;

  return instruction;
}

export type ParsedLeaveGroupInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    memberAccount: TAccountMetas[1];
    member: TAccountMetas[2];
  };
  data: LeaveGroupInstructionData;
};

export function parseLeaveGroupInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedLeaveGroupInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      memberAccount: getNextAccount(),
      member: getNextAccount(),
    },
    data: getLeaveGroupInstructionDataDecoder().decode(instruction.data),
  };
}
