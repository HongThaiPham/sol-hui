/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GET_MEMBER_STATISTICS_DISCRIMINATOR = new Uint8Array([
  65, 132, 61, 98, 78, 20, 135, 206,
]);

export function getGetMemberStatisticsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_MEMBER_STATISTICS_DISCRIMINATOR
  );
}

export type GetMemberStatisticsInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMemberAccount extends string
        ? ReadonlyAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      ...TRemainingAccounts,
    ]
  >;

export type GetMemberStatisticsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GetMemberStatisticsInstructionDataArgs = {};

export function getGetMemberStatisticsInstructionDataEncoder(): FixedSizeEncoder<GetMemberStatisticsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: GET_MEMBER_STATISTICS_DISCRIMINATOR,
    })
  );
}

export function getGetMemberStatisticsInstructionDataDecoder(): FixedSizeDecoder<GetMemberStatisticsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGetMemberStatisticsInstructionDataCodec(): FixedSizeCodec<
  GetMemberStatisticsInstructionDataArgs,
  GetMemberStatisticsInstructionData
> {
  return combineCodec(
    getGetMemberStatisticsInstructionDataEncoder(),
    getGetMemberStatisticsInstructionDataDecoder()
  );
}

export type GetMemberStatisticsInput<
  TAccountMemberAccount extends string = string,
> = {
  memberAccount: Address<TAccountMemberAccount>;
};

export function getGetMemberStatisticsInstruction<
  TAccountMemberAccount extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: GetMemberStatisticsInput<TAccountMemberAccount>,
  config?: { programAddress?: TProgramAddress }
): GetMemberStatisticsInstruction<TProgramAddress, TAccountMemberAccount> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    memberAccount: { value: input.memberAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.memberAccount)],
    programAddress,
    data: getGetMemberStatisticsInstructionDataEncoder().encode({}),
  } as GetMemberStatisticsInstruction<TProgramAddress, TAccountMemberAccount>;

  return instruction;
}

export type ParsedGetMemberStatisticsInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    memberAccount: TAccountMetas[0];
  };
  data: GetMemberStatisticsInstructionData;
};

export function parseGetMemberStatisticsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedGetMemberStatisticsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      memberAccount: getNextAccount(),
    },
    data: getGetMemberStatisticsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
