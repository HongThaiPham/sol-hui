/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const COMMIT_RANDOMNESS_DISCRIMINATOR = new Uint8Array([
  146, 52, 195, 220, 79, 30, 53, 26,
]);

export function getCommitRandomnessDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMMIT_RANDOMNESS_DISCRIMINATOR
  );
}

export type CommitRandomnessInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountRandomnessAccount extends string | AccountMeta<string> = string,
  TAccountQueue extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountRound extends string
        ? WritableAccount<TAccountRound>
        : TAccountRound,
      TAccountRandomnessAccount extends string
        ? WritableAccount<TAccountRandomnessAccount>
        : TAccountRandomnessAccount,
      TAccountQueue extends string
        ? ReadonlyAccount<TAccountQueue>
        : TAccountQueue,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CommitRandomnessInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
};

export type CommitRandomnessInstructionDataArgs = { roundNumber: number };

export function getCommitRandomnessInstructionDataEncoder(): FixedSizeEncoder<CommitRandomnessInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COMMIT_RANDOMNESS_DISCRIMINATOR })
  );
}

export function getCommitRandomnessInstructionDataDecoder(): FixedSizeDecoder<CommitRandomnessInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
  ]);
}

export function getCommitRandomnessInstructionDataCodec(): FixedSizeCodec<
  CommitRandomnessInstructionDataArgs,
  CommitRandomnessInstructionData
> {
  return combineCodec(
    getCommitRandomnessInstructionDataEncoder(),
    getCommitRandomnessInstructionDataDecoder()
  );
}

export type CommitRandomnessAsyncInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountRandomnessAccount extends string = string,
  TAccountQueue extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  round?: Address<TAccountRound>;
  /** Switchboard randomness account */
  randomnessAccount: Address<TAccountRandomnessAccount>;
  /** Switchboard queue account */
  queue: Address<TAccountQueue>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  roundNumber: CommitRandomnessInstructionDataArgs['roundNumber'];
};

export async function getCommitRandomnessInstructionAsync<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountRandomnessAccount extends string,
  TAccountQueue extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: CommitRandomnessAsyncInput<
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountQueue,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CommitRandomnessInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountQueue,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    randomnessAccount: {
      value: input.randomnessAccount ?? null,
      isWritable: true,
    },
    queue: { value: input.queue ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.round.value) {
    accounts.round.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([114, 111, 117, 110, 100])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.randomnessAccount),
      getAccountMeta(accounts.queue),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCommitRandomnessInstructionDataEncoder().encode(
      args as CommitRandomnessInstructionDataArgs
    ),
  } as CommitRandomnessInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountQueue,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CommitRandomnessInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountRandomnessAccount extends string = string,
  TAccountQueue extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  round: Address<TAccountRound>;
  /** Switchboard randomness account */
  randomnessAccount: Address<TAccountRandomnessAccount>;
  /** Switchboard queue account */
  queue: Address<TAccountQueue>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  roundNumber: CommitRandomnessInstructionDataArgs['roundNumber'];
};

export function getCommitRandomnessInstruction<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountRandomnessAccount extends string,
  TAccountQueue extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: CommitRandomnessInput<
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountQueue,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CommitRandomnessInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountRound,
  TAccountRandomnessAccount,
  TAccountQueue,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    randomnessAccount: {
      value: input.randomnessAccount ?? null,
      isWritable: true,
    },
    queue: { value: input.queue ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.randomnessAccount),
      getAccountMeta(accounts.queue),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCommitRandomnessInstructionDataEncoder().encode(
      args as CommitRandomnessInstructionDataArgs
    ),
  } as CommitRandomnessInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountQueue,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCommitRandomnessInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    round: TAccountMetas[1];
    /** Switchboard randomness account */
    randomnessAccount: TAccountMetas[2];
    /** Switchboard queue account */
    queue: TAccountMetas[3];
    authority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: CommitRandomnessInstructionData;
};

export function parseCommitRandomnessInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCommitRandomnessInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      round: getNextAccount(),
      randomnessAccount: getNextAccount(),
      queue: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCommitRandomnessInstructionDataDecoder().decode(instruction.data),
  };
}
