/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PROCESS_PARTIAL_REFUND_DISCRIMINATOR = new Uint8Array([
  91, 2, 45, 239, 179, 132, 197, 213,
]);

export function getProcessPartialRefundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROCESS_PARTIAL_REFUND_DISCRIMINATOR
  );
}

export type ProcessPartialRefundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountMemberTokenAccount extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMemberTokenAccount extends string
        ? WritableAccount<TAccountMemberTokenAccount>
        : TAccountMemberTokenAccount,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type ProcessPartialRefundInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ProcessPartialRefundInstructionDataArgs = {};

export function getProcessPartialRefundInstructionDataEncoder(): FixedSizeEncoder<ProcessPartialRefundInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: PROCESS_PARTIAL_REFUND_DISCRIMINATOR,
    })
  );
}

export function getProcessPartialRefundInstructionDataDecoder(): FixedSizeDecoder<ProcessPartialRefundInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getProcessPartialRefundInstructionDataCodec(): FixedSizeCodec<
  ProcessPartialRefundInstructionDataArgs,
  ProcessPartialRefundInstructionData
> {
  return combineCodec(
    getProcessPartialRefundInstructionDataEncoder(),
    getProcessPartialRefundInstructionDataDecoder()
  );
}

export type ProcessPartialRefundAsyncInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  vault?: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export async function getProcessPartialRefundInstructionAsync<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountMemberTokenAccount extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: ProcessPartialRefundAsyncInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ProcessPartialRefundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getProcessPartialRefundInstructionDataEncoder().encode({}),
  } as ProcessPartialRefundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ProcessPartialRefundInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  vault: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export function getProcessPartialRefundInstruction<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountMemberTokenAccount extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: ProcessPartialRefundInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): ProcessPartialRefundInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountMemberAccount,
  TAccountVault,
  TAccountMint,
  TAccountMemberTokenAccount,
  TAccountAdmin,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getProcessPartialRefundInstructionDataEncoder().encode({}),
  } as ProcessPartialRefundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedProcessPartialRefundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    memberAccount: TAccountMetas[1];
    vault: TAccountMetas[2];
    mint: TAccountMetas[3];
    memberTokenAccount: TAccountMetas[4];
    admin: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    rent: TAccountMetas[8];
  };
  data: ProcessPartialRefundInstructionData;
};

export function parseProcessPartialRefundInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProcessPartialRefundInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      memberAccount: getNextAccount(),
      vault: getNextAccount(),
      mint: getNextAccount(),
      memberTokenAccount: getNextAccount(),
      admin: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getProcessPartialRefundInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
