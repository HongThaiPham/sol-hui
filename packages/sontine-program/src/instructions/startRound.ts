/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const START_ROUND_DISCRIMINATOR = new Uint8Array([
  144, 144, 43, 7, 193, 42, 217, 215,
]);

export function getStartRoundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(START_ROUND_DISCRIMINATOR);
}

export type StartRoundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountRound extends string
        ? WritableAccount<TAccountRound>
        : TAccountRound,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type StartRoundInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
};

export type StartRoundInstructionDataArgs = { roundNumber: number };

export function getStartRoundInstructionDataEncoder(): FixedSizeEncoder<StartRoundInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: START_ROUND_DISCRIMINATOR })
  );
}

export function getStartRoundInstructionDataDecoder(): FixedSizeDecoder<StartRoundInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
  ]);
}

export function getStartRoundInstructionDataCodec(): FixedSizeCodec<
  StartRoundInstructionDataArgs,
  StartRoundInstructionData
> {
  return combineCodec(
    getStartRoundInstructionDataEncoder(),
    getStartRoundInstructionDataDecoder()
  );
}

export type StartRoundAsyncInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  round?: Address<TAccountRound>;
  admin: TransactionSigner<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
  roundNumber: StartRoundInstructionDataArgs['roundNumber'];
};

export async function getStartRoundInstructionAsync<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: StartRoundAsyncInput<
    TAccountGroup,
    TAccountRound,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StartRoundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAdmin,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.round.value) {
    accounts.round.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([114, 111, 117, 110, 100])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStartRoundInstructionDataEncoder().encode(
      args as StartRoundInstructionDataArgs
    ),
  } as StartRoundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type StartRoundInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  round: Address<TAccountRound>;
  admin: TransactionSigner<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
  roundNumber: StartRoundInstructionDataArgs['roundNumber'];
};

export function getStartRoundInstruction<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: StartRoundInput<
    TAccountGroup,
    TAccountRound,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): StartRoundInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountRound,
  TAccountAdmin,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStartRoundInstructionDataEncoder().encode(
      args as StartRoundInstructionDataArgs
    ),
  } as StartRoundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedStartRoundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    round: TAccountMetas[1];
    admin: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: StartRoundInstructionData;
};

export function parseStartRoundInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStartRoundInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      round: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getStartRoundInstructionDataDecoder().decode(instruction.data),
  };
}
