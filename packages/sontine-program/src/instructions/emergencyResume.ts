/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EMERGENCY_RESUME_DISCRIMINATOR = new Uint8Array([
  0, 243, 48, 185, 6, 73, 190, 83,
]);

export function getEmergencyResumeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EMERGENCY_RESUME_DISCRIMINATOR
  );
}

export type EmergencyResumeInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type EmergencyResumeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type EmergencyResumeInstructionDataArgs = {};

export function getEmergencyResumeInstructionDataEncoder(): FixedSizeEncoder<EmergencyResumeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: EMERGENCY_RESUME_DISCRIMINATOR })
  );
}

export function getEmergencyResumeInstructionDataDecoder(): FixedSizeDecoder<EmergencyResumeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getEmergencyResumeInstructionDataCodec(): FixedSizeCodec<
  EmergencyResumeInstructionDataArgs,
  EmergencyResumeInstructionData
> {
  return combineCodec(
    getEmergencyResumeInstructionDataEncoder(),
    getEmergencyResumeInstructionDataDecoder()
  );
}

export type EmergencyResumeInput<
  TAccountGroup extends string = string,
  TAccountAdmin extends string = string,
> = {
  group: Address<TAccountGroup>;
  admin: TransactionSigner<TAccountAdmin>;
};

export function getEmergencyResumeInstruction<
  TAccountGroup extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: EmergencyResumeInput<TAccountGroup, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): EmergencyResumeInstruction<TProgramAddress, TAccountGroup, TAccountAdmin> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.group), getAccountMeta(accounts.admin)],
    programAddress,
    data: getEmergencyResumeInstructionDataEncoder().encode({}),
  } as EmergencyResumeInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedEmergencyResumeInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    admin: TAccountMetas[1];
  };
  data: EmergencyResumeInstructionData;
};

export function parseEmergencyResumeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEmergencyResumeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getEmergencyResumeInstructionDataDecoder().decode(instruction.data),
  };
}
