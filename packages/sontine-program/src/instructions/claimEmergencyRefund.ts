/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_EMERGENCY_REFUND_DISCRIMINATOR = new Uint8Array([
  93, 43, 46, 219, 83, 211, 152, 172,
]);

export function getClaimEmergencyRefundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_EMERGENCY_REFUND_DISCRIMINATOR
  );
}

export type ClaimEmergencyRefundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountMemberTokenAccount extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? ReadonlyAccount<TAccountGroup>
        : TAccountGroup,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMemberTokenAccount extends string
        ? WritableAccount<TAccountMemberTokenAccount>
        : TAccountMemberTokenAccount,
      TAccountMember extends string
        ? WritableSignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimEmergencyRefundInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimEmergencyRefundInstructionDataArgs = {};

export function getClaimEmergencyRefundInstructionDataEncoder(): FixedSizeEncoder<ClaimEmergencyRefundInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLAIM_EMERGENCY_REFUND_DISCRIMINATOR,
    })
  );
}

export function getClaimEmergencyRefundInstructionDataDecoder(): FixedSizeDecoder<ClaimEmergencyRefundInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimEmergencyRefundInstructionDataCodec(): FixedSizeCodec<
  ClaimEmergencyRefundInstructionDataArgs,
  ClaimEmergencyRefundInstructionData
> {
  return combineCodec(
    getClaimEmergencyRefundInstructionDataEncoder(),
    getClaimEmergencyRefundInstructionDataDecoder()
  );
}

export type ClaimEmergencyRefundAsyncInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountMember extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  vault?: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  member: TransactionSigner<TAccountMember>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getClaimEmergencyRefundInstructionAsync<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountMemberTokenAccount extends string,
  TAccountMember extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: ClaimEmergencyRefundAsyncInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountMember,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimEmergencyRefundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountMember,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    member: { value: input.member ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimEmergencyRefundInstructionDataEncoder().encode({}),
  } as ClaimEmergencyRefundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountMember,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ClaimEmergencyRefundInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountMember extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  vault: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  member: TransactionSigner<TAccountMember>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getClaimEmergencyRefundInstruction<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountMemberTokenAccount extends string,
  TAccountMember extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: ClaimEmergencyRefundInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountMember,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimEmergencyRefundInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountMemberAccount,
  TAccountVault,
  TAccountMint,
  TAccountMemberTokenAccount,
  TAccountMember,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    member: { value: input.member ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimEmergencyRefundInstructionDataEncoder().encode({}),
  } as ClaimEmergencyRefundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountVault,
    TAccountMint,
    TAccountMemberTokenAccount,
    TAccountMember,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedClaimEmergencyRefundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    memberAccount: TAccountMetas[1];
    vault: TAccountMetas[2];
    mint: TAccountMetas[3];
    memberTokenAccount: TAccountMetas[4];
    member: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: ClaimEmergencyRefundInstructionData;
};

export function parseClaimEmergencyRefundInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimEmergencyRefundInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      memberAccount: getNextAccount(),
      vault: getNextAccount(),
      mint: getNextAccount(),
      memberTokenAccount: getNextAccount(),
      member: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClaimEmergencyRefundInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
