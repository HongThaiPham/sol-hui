/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAuctionConfigDecoder,
  getAuctionConfigEncoder,
  getCycleDurationDecoder,
  getCycleDurationEncoder,
  getSelectionMethodDecoder,
  getSelectionMethodEncoder,
  type AuctionConfig,
  type AuctionConfigArgs,
  type CycleDuration,
  type CycleDurationArgs,
  type SelectionMethod,
  type SelectionMethodArgs,
} from '../types';

export const CREATE_GROUP_DISCRIMINATOR = new Uint8Array([
  79, 60, 158, 134, 61, 199, 56, 248,
]);

export function getCreateGroupDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_GROUP_DISCRIMINATOR
  );
}

export type CreateGroupInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateGroupInstructionData = {
  discriminator: ReadonlyUint8Array;
  groupId: bigint;
  selectionMethod: SelectionMethod;
  maxMembers: number;
  contributionAmount: bigint;
  cycleDuration: CycleDuration;
  minMembersToStart: Option<number>;
  auctionConfig: Option<AuctionConfig>;
};

export type CreateGroupInstructionDataArgs = {
  groupId: number | bigint;
  selectionMethod: SelectionMethodArgs;
  maxMembers: number;
  contributionAmount: number | bigint;
  cycleDuration: CycleDurationArgs;
  minMembersToStart: OptionOrNullable<number>;
  auctionConfig: OptionOrNullable<AuctionConfigArgs>;
};

export function getCreateGroupInstructionDataEncoder(): Encoder<CreateGroupInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['groupId', getU64Encoder()],
      ['selectionMethod', getSelectionMethodEncoder()],
      ['maxMembers', getU8Encoder()],
      ['contributionAmount', getU64Encoder()],
      ['cycleDuration', getCycleDurationEncoder()],
      ['minMembersToStart', getOptionEncoder(getU8Encoder())],
      ['auctionConfig', getOptionEncoder(getAuctionConfigEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_GROUP_DISCRIMINATOR })
  );
}

export function getCreateGroupInstructionDataDecoder(): Decoder<CreateGroupInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['groupId', getU64Decoder()],
    ['selectionMethod', getSelectionMethodDecoder()],
    ['maxMembers', getU8Decoder()],
    ['contributionAmount', getU64Decoder()],
    ['cycleDuration', getCycleDurationDecoder()],
    ['minMembersToStart', getOptionDecoder(getU8Decoder())],
    ['auctionConfig', getOptionDecoder(getAuctionConfigDecoder())],
  ]);
}

export function getCreateGroupInstructionDataCodec(): Codec<
  CreateGroupInstructionDataArgs,
  CreateGroupInstructionData
> {
  return combineCodec(
    getCreateGroupInstructionDataEncoder(),
    getCreateGroupInstructionDataDecoder()
  );
}

export type CreateGroupAsyncInput<
  TAccountGroup extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  group?: Address<TAccountGroup>;
  vault?: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  admin: TransactionSigner<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  groupId: CreateGroupInstructionDataArgs['groupId'];
  selectionMethod: CreateGroupInstructionDataArgs['selectionMethod'];
  maxMembers: CreateGroupInstructionDataArgs['maxMembers'];
  contributionAmount: CreateGroupInstructionDataArgs['contributionAmount'];
  cycleDuration: CreateGroupInstructionDataArgs['cycleDuration'];
  minMembersToStart: CreateGroupInstructionDataArgs['minMembersToStart'];
  auctionConfig: CreateGroupInstructionDataArgs['auctionConfig'];
};

export async function getCreateGroupInstructionAsync<
  TAccountGroup extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: CreateGroupAsyncInput<
    TAccountGroup,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateGroupInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.group.value) {
    accounts.group.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([103, 114, 111, 117, 112])),
        getAddressEncoder().encode(expectAddress(accounts.admin.value)),
        getU64Encoder().encode(expectSome(args.groupId)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateGroupInstructionDataEncoder().encode(
      args as CreateGroupInstructionDataArgs
    ),
  } as CreateGroupInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type CreateGroupInput<
  TAccountGroup extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  group: Address<TAccountGroup>;
  vault: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  admin: TransactionSigner<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  groupId: CreateGroupInstructionDataArgs['groupId'];
  selectionMethod: CreateGroupInstructionDataArgs['selectionMethod'];
  maxMembers: CreateGroupInstructionDataArgs['maxMembers'];
  contributionAmount: CreateGroupInstructionDataArgs['contributionAmount'];
  cycleDuration: CreateGroupInstructionDataArgs['cycleDuration'];
  minMembersToStart: CreateGroupInstructionDataArgs['minMembersToStart'];
  auctionConfig: CreateGroupInstructionDataArgs['auctionConfig'];
};

export function getCreateGroupInstruction<
  TAccountGroup extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: CreateGroupInput<
    TAccountGroup,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateGroupInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountVault,
  TAccountMint,
  TAccountAdmin,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateGroupInstructionDataEncoder().encode(
      args as CreateGroupInstructionDataArgs
    ),
  } as CreateGroupInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateGroupInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    vault: TAccountMetas[1];
    mint: TAccountMetas[2];
    admin: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    rent: TAccountMetas[6];
  };
  data: CreateGroupInstructionData;
};

export function parseCreateGroupInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateGroupInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      vault: getNextAccount(),
      mint: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateGroupInstructionDataDecoder().decode(instruction.data),
  };
}
