/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const START_AUCTION_DISCRIMINATOR = new Uint8Array([
  255, 2, 149, 136, 148, 125, 65, 195,
]);

export function getStartAuctionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    START_AUCTION_DISCRIMINATOR
  );
}

export type StartAuctionInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountAuctionRound extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? ReadonlyAccount<TAccountGroup>
        : TAccountGroup,
      TAccountRound extends string
        ? WritableAccount<TAccountRound>
        : TAccountRound,
      TAccountAuctionRound extends string
        ? WritableAccount<TAccountAuctionRound>
        : TAccountAuctionRound,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type StartAuctionInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
};

export type StartAuctionInstructionDataArgs = { roundNumber: number };

export function getStartAuctionInstructionDataEncoder(): FixedSizeEncoder<StartAuctionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: START_AUCTION_DISCRIMINATOR })
  );
}

export function getStartAuctionInstructionDataDecoder(): FixedSizeDecoder<StartAuctionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
  ]);
}

export function getStartAuctionInstructionDataCodec(): FixedSizeCodec<
  StartAuctionInstructionDataArgs,
  StartAuctionInstructionData
> {
  return combineCodec(
    getStartAuctionInstructionDataEncoder(),
    getStartAuctionInstructionDataDecoder()
  );
}

export type StartAuctionAsyncInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountAuctionRound extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  round: Address<TAccountRound>;
  auctionRound?: Address<TAccountAuctionRound>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  roundNumber: StartAuctionInstructionDataArgs['roundNumber'];
};

export async function getStartAuctionInstructionAsync<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountAuctionRound extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: StartAuctionAsyncInput<
    TAccountGroup,
    TAccountRound,
    TAccountAuctionRound,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StartAuctionInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAuctionRound,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    round: { value: input.round ?? null, isWritable: true },
    auctionRound: { value: input.auctionRound ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.auctionRound.value) {
    accounts.auctionRound.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 99, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.auctionRound),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStartAuctionInstructionDataEncoder().encode(
      args as StartAuctionInstructionDataArgs
    ),
  } as StartAuctionInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAuctionRound,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type StartAuctionInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountAuctionRound extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  round: Address<TAccountRound>;
  auctionRound: Address<TAccountAuctionRound>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  roundNumber: StartAuctionInstructionDataArgs['roundNumber'];
};

export function getStartAuctionInstruction<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountAuctionRound extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: StartAuctionInput<
    TAccountGroup,
    TAccountRound,
    TAccountAuctionRound,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): StartAuctionInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountRound,
  TAccountAuctionRound,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    round: { value: input.round ?? null, isWritable: true },
    auctionRound: { value: input.auctionRound ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.auctionRound),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStartAuctionInstructionDataEncoder().encode(
      args as StartAuctionInstructionDataArgs
    ),
  } as StartAuctionInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAuctionRound,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedStartAuctionInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    round: TAccountMetas[1];
    auctionRound: TAccountMetas[2];
    authority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: StartAuctionInstructionData;
};

export function parseStartAuctionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStartAuctionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      round: getNextAccount(),
      auctionRound: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getStartAuctionInstructionDataDecoder().decode(instruction.data),
  };
}
