/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CONTRIBUTE_DISCRIMINATOR = new Uint8Array([
  82, 33, 68, 131, 32, 0, 205, 95,
]);

export function getContributeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONTRIBUTE_DISCRIMINATOR);
}

export type ContributeInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMemberTokenAccount extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountRound extends string
        ? WritableAccount<TAccountRound>
        : TAccountRound,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMemberTokenAccount extends string
        ? WritableAccount<TAccountMemberTokenAccount>
        : TAccountMemberTokenAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMember extends string
        ? WritableSignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type ContributeInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
  amount: bigint;
};

export type ContributeInstructionDataArgs = {
  roundNumber: number;
  amount: number | bigint;
};

export function getContributeInstructionDataEncoder(): FixedSizeEncoder<ContributeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CONTRIBUTE_DISCRIMINATOR })
  );
}

export function getContributeInstructionDataDecoder(): FixedSizeDecoder<ContributeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getContributeInstructionDataCodec(): FixedSizeCodec<
  ContributeInstructionDataArgs,
  ContributeInstructionData
> {
  return combineCodec(
    getContributeInstructionDataEncoder(),
    getContributeInstructionDataDecoder()
  );
}

export type ContributeAsyncInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountRound extends string = string,
  TAccountVault extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountMember extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  round?: Address<TAccountRound>;
  vault?: Address<TAccountVault>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  mint: Address<TAccountMint>;
  member: TransactionSigner<TAccountMember>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  roundNumber: ContributeInstructionDataArgs['roundNumber'];
  amount: ContributeInstructionDataArgs['amount'];
};

export async function getContributeInstructionAsync<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountRound extends string,
  TAccountVault extends string,
  TAccountMemberTokenAccount extends string,
  TAccountMint extends string,
  TAccountMember extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: ContributeAsyncInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountMint,
    TAccountMember,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ContributeInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountMint,
    TAccountMember,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    member: { value: input.member ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.round.value) {
    accounts.round.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([114, 111, 117, 110, 100])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getContributeInstructionDataEncoder().encode(
      args as ContributeInstructionDataArgs
    ),
  } as ContributeInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountMint,
    TAccountMember,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ContributeInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountRound extends string = string,
  TAccountVault extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountMember extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  round: Address<TAccountRound>;
  vault: Address<TAccountVault>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  mint: Address<TAccountMint>;
  member: TransactionSigner<TAccountMember>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  roundNumber: ContributeInstructionDataArgs['roundNumber'];
  amount: ContributeInstructionDataArgs['amount'];
};

export function getContributeInstruction<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountRound extends string,
  TAccountVault extends string,
  TAccountMemberTokenAccount extends string,
  TAccountMint extends string,
  TAccountMember extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: ContributeInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountMint,
    TAccountMember,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): ContributeInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountMemberAccount,
  TAccountRound,
  TAccountVault,
  TAccountMemberTokenAccount,
  TAccountMint,
  TAccountMember,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    member: { value: input.member ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getContributeInstructionDataEncoder().encode(
      args as ContributeInstructionDataArgs
    ),
  } as ContributeInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountMint,
    TAccountMember,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedContributeInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    memberAccount: TAccountMetas[1];
    round: TAccountMetas[2];
    vault: TAccountMetas[3];
    memberTokenAccount: TAccountMetas[4];
    mint: TAccountMetas[5];
    member: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
  };
  data: ContributeInstructionData;
};

export function parseContributeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedContributeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      memberAccount: getNextAccount(),
      round: getNextAccount(),
      vault: getNextAccount(),
      memberTokenAccount: getNextAccount(),
      mint: getNextAccount(),
      member: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getContributeInstructionDataDecoder().decode(instruction.data),
  };
}
