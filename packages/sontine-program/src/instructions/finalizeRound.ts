/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const FINALIZE_ROUND_DISCRIMINATOR = new Uint8Array([
  239, 160, 254, 11, 254, 144, 53, 148,
]);

export function getFinalizeRoundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FINALIZE_ROUND_DISCRIMINATOR
  );
}

export type FinalizeRoundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountRound extends string
        ? WritableAccount<TAccountRound>
        : TAccountRound,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type FinalizeRoundInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
};

export type FinalizeRoundInstructionDataArgs = { roundNumber: number };

export function getFinalizeRoundInstructionDataEncoder(): FixedSizeEncoder<FinalizeRoundInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: FINALIZE_ROUND_DISCRIMINATOR })
  );
}

export function getFinalizeRoundInstructionDataDecoder(): FixedSizeDecoder<FinalizeRoundInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
  ]);
}

export function getFinalizeRoundInstructionDataCodec(): FixedSizeCodec<
  FinalizeRoundInstructionDataArgs,
  FinalizeRoundInstructionData
> {
  return combineCodec(
    getFinalizeRoundInstructionDataEncoder(),
    getFinalizeRoundInstructionDataDecoder()
  );
}

export type FinalizeRoundAsyncInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountAdmin extends string = string,
> = {
  group: Address<TAccountGroup>;
  round?: Address<TAccountRound>;
  admin: TransactionSigner<TAccountAdmin>;
  roundNumber: FinalizeRoundInstructionDataArgs['roundNumber'];
};

export async function getFinalizeRoundInstructionAsync<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: FinalizeRoundAsyncInput<TAccountGroup, TAccountRound, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  FinalizeRoundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAdmin
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.round.value) {
    accounts.round.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([114, 111, 117, 110, 100])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getFinalizeRoundInstructionDataEncoder().encode(
      args as FinalizeRoundInstructionDataArgs
    ),
  } as FinalizeRoundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAdmin
  >;

  return instruction;
}

export type FinalizeRoundInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountAdmin extends string = string,
> = {
  group: Address<TAccountGroup>;
  round: Address<TAccountRound>;
  admin: TransactionSigner<TAccountAdmin>;
  roundNumber: FinalizeRoundInstructionDataArgs['roundNumber'];
};

export function getFinalizeRoundInstruction<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: FinalizeRoundInput<TAccountGroup, TAccountRound, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): FinalizeRoundInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountRound,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getFinalizeRoundInstructionDataEncoder().encode(
      args as FinalizeRoundInstructionDataArgs
    ),
  } as FinalizeRoundInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedFinalizeRoundInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    round: TAccountMetas[1];
    admin: TAccountMetas[2];
  };
  data: FinalizeRoundInstructionData;
};

export function parseFinalizeRoundInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedFinalizeRoundInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      round: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getFinalizeRoundInstructionDataDecoder().decode(instruction.data),
  };
}
