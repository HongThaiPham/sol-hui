/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DISTRIBUTE_INTEREST_DISCRIMINATOR = new Uint8Array([
  161, 80, 239, 247, 115, 254, 122, 80,
]);

export function getDistributeInterestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DISTRIBUTE_INTEREST_DISCRIMINATOR
  );
}

export type DistributeInterestInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMemberTokenAccount extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? ReadonlyAccount<TAccountGroup>
        : TAccountGroup,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountRound extends string
        ? ReadonlyAccount<TAccountRound>
        : TAccountRound,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMemberTokenAccount extends string
        ? WritableAccount<TAccountMemberTokenAccount>
        : TAccountMemberTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DistributeInterestInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
  remainingMembers: number;
};

export type DistributeInterestInstructionDataArgs = {
  roundNumber: number;
  remainingMembers: number;
};

export function getDistributeInterestInstructionDataEncoder(): FixedSizeEncoder<DistributeInterestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
      ['remainingMembers', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DISTRIBUTE_INTEREST_DISCRIMINATOR })
  );
}

export function getDistributeInterestInstructionDataDecoder(): FixedSizeDecoder<DistributeInterestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
    ['remainingMembers', getU8Decoder()],
  ]);
}

export function getDistributeInterestInstructionDataCodec(): FixedSizeCodec<
  DistributeInterestInstructionDataArgs,
  DistributeInterestInstructionData
> {
  return combineCodec(
    getDistributeInterestInstructionDataEncoder(),
    getDistributeInterestInstructionDataDecoder()
  );
}

export type DistributeInterestAsyncInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountRound extends string = string,
  TAccountVault extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  round?: Address<TAccountRound>;
  vault?: Address<TAccountVault>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  roundNumber: DistributeInterestInstructionDataArgs['roundNumber'];
  remainingMembers: DistributeInterestInstructionDataArgs['remainingMembers'];
};

export async function getDistributeInterestInstructionAsync<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountRound extends string,
  TAccountVault extends string,
  TAccountMemberTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: DistributeInterestAsyncInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DistributeInterestInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.round.value) {
    accounts.round.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([114, 111, 117, 110, 100])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDistributeInterestInstructionDataEncoder().encode(
      args as DistributeInterestInstructionDataArgs
    ),
  } as DistributeInterestInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type DistributeInterestInput<
  TAccountGroup extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountRound extends string = string,
  TAccountVault extends string = string,
  TAccountMemberTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  group: Address<TAccountGroup>;
  memberAccount: Address<TAccountMemberAccount>;
  round: Address<TAccountRound>;
  vault: Address<TAccountVault>;
  memberTokenAccount: Address<TAccountMemberTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  roundNumber: DistributeInterestInstructionDataArgs['roundNumber'];
  remainingMembers: DistributeInterestInstructionDataArgs['remainingMembers'];
};

export function getDistributeInterestInstruction<
  TAccountGroup extends string,
  TAccountMemberAccount extends string,
  TAccountRound extends string,
  TAccountVault extends string,
  TAccountMemberTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: DistributeInterestInput<
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeInterestInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountMemberAccount,
  TAccountRound,
  TAccountVault,
  TAccountMemberTokenAccount,
  TAccountAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: false },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    memberTokenAccount: {
      value: input.memberTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.memberTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDistributeInterestInstructionDataEncoder().encode(
      args as DistributeInterestInstructionDataArgs
    ),
  } as DistributeInterestInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountMemberAccount,
    TAccountRound,
    TAccountVault,
    TAccountMemberTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedDistributeInterestInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    memberAccount: TAccountMetas[1];
    round: TAccountMetas[2];
    vault: TAccountMetas[3];
    memberTokenAccount: TAccountMetas[4];
    authority: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: DistributeInterestInstructionData;
};

export function parseDistributeInterestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDistributeInterestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      memberAccount: getNextAccount(),
      round: getNextAccount(),
      vault: getNextAccount(),
      memberTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDistributeInterestInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
