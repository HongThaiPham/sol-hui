/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SONTINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SETTLE_RANDOMNESS_DISCRIMINATOR = new Uint8Array([
  209, 111, 84, 239, 14, 4, 26, 251,
]);

export function getSettleRandomnessDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SETTLE_RANDOMNESS_DISCRIMINATOR
  );
}

export type SettleRandomnessInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountGroup extends string | AccountMeta<string> = string,
  TAccountRound extends string | AccountMeta<string> = string,
  TAccountRandomnessAccount extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountRound extends string
        ? WritableAccount<TAccountRound>
        : TAccountRound,
      TAccountRandomnessAccount extends string
        ? ReadonlyAccount<TAccountRandomnessAccount>
        : TAccountRandomnessAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SettleRandomnessInstructionData = {
  discriminator: ReadonlyUint8Array;
  roundNumber: number;
  eligibleMembers: Array<Address>;
};

export type SettleRandomnessInstructionDataArgs = {
  roundNumber: number;
  eligibleMembers: Array<Address>;
};

export function getSettleRandomnessInstructionDataEncoder(): Encoder<SettleRandomnessInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['roundNumber', getU8Encoder()],
      ['eligibleMembers', getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: SETTLE_RANDOMNESS_DISCRIMINATOR })
  );
}

export function getSettleRandomnessInstructionDataDecoder(): Decoder<SettleRandomnessInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['roundNumber', getU8Decoder()],
    ['eligibleMembers', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getSettleRandomnessInstructionDataCodec(): Codec<
  SettleRandomnessInstructionDataArgs,
  SettleRandomnessInstructionData
> {
  return combineCodec(
    getSettleRandomnessInstructionDataEncoder(),
    getSettleRandomnessInstructionDataDecoder()
  );
}

export type SettleRandomnessAsyncInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountRandomnessAccount extends string = string,
  TAccountAuthority extends string = string,
> = {
  group: Address<TAccountGroup>;
  round?: Address<TAccountRound>;
  /** Switchboard randomness account */
  randomnessAccount: Address<TAccountRandomnessAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  roundNumber: SettleRandomnessInstructionDataArgs['roundNumber'];
  eligibleMembers: SettleRandomnessInstructionDataArgs['eligibleMembers'];
};

export async function getSettleRandomnessInstructionAsync<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountRandomnessAccount extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: SettleRandomnessAsyncInput<
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SettleRandomnessInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountAuthority
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    randomnessAccount: {
      value: input.randomnessAccount ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.round.value) {
    accounts.round.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([114, 111, 117, 110, 100])),
        getAddressEncoder().encode(expectAddress(accounts.group.value)),
        getU8Encoder().encode(expectSome(args.roundNumber)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.randomnessAccount),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getSettleRandomnessInstructionDataEncoder().encode(
      args as SettleRandomnessInstructionDataArgs
    ),
  } as SettleRandomnessInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountAuthority
  >;

  return instruction;
}

export type SettleRandomnessInput<
  TAccountGroup extends string = string,
  TAccountRound extends string = string,
  TAccountRandomnessAccount extends string = string,
  TAccountAuthority extends string = string,
> = {
  group: Address<TAccountGroup>;
  round: Address<TAccountRound>;
  /** Switchboard randomness account */
  randomnessAccount: Address<TAccountRandomnessAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  roundNumber: SettleRandomnessInstructionDataArgs['roundNumber'];
  eligibleMembers: SettleRandomnessInstructionDataArgs['eligibleMembers'];
};

export function getSettleRandomnessInstruction<
  TAccountGroup extends string,
  TAccountRound extends string,
  TAccountRandomnessAccount extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof SONTINE_PROGRAM_ADDRESS,
>(
  input: SettleRandomnessInput<
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): SettleRandomnessInstruction<
  TProgramAddress,
  TAccountGroup,
  TAccountRound,
  TAccountRandomnessAccount,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? SONTINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    group: { value: input.group ?? null, isWritable: true },
    round: { value: input.round ?? null, isWritable: true },
    randomnessAccount: {
      value: input.randomnessAccount ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.round),
      getAccountMeta(accounts.randomnessAccount),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getSettleRandomnessInstructionDataEncoder().encode(
      args as SettleRandomnessInstructionDataArgs
    ),
  } as SettleRandomnessInstruction<
    TProgramAddress,
    TAccountGroup,
    TAccountRound,
    TAccountRandomnessAccount,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedSettleRandomnessInstruction<
  TProgram extends string = typeof SONTINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    group: TAccountMetas[0];
    round: TAccountMetas[1];
    /** Switchboard randomness account */
    randomnessAccount: TAccountMetas[2];
    authority: TAccountMetas[3];
  };
  data: SettleRandomnessInstructionData;
};

export function parseSettleRandomnessInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSettleRandomnessInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      group: getNextAccount(),
      round: getNextAccount(),
      randomnessAccount: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getSettleRandomnessInstructionDataDecoder().decode(instruction.data),
  };
}
