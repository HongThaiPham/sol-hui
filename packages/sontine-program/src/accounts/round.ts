/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getRandomnessStatusDecoder,
  getRandomnessStatusEncoder,
  getRoundStatusDecoder,
  getRoundStatusEncoder,
  type RandomnessStatus,
  type RandomnessStatusArgs,
  type RoundStatus,
  type RoundStatusArgs,
} from '../types';

export const ROUND_DISCRIMINATOR = new Uint8Array([
  87, 127, 165, 51, 73, 78, 116, 174,
]);

export function getRoundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ROUND_DISCRIMINATOR);
}

export type Round = {
  discriminator: ReadonlyUint8Array;
  /** The group this round belongs to */
  group: Address;
  /** Round number (0-indexed) */
  roundNumber: number;
  /** Current status of the round */
  status: RoundStatus;
  /** When the round started */
  startTime: bigint;
  /** When the round should end */
  endTime: bigint;
  /** Target amount to collect this round */
  targetAmount: bigint;
  /** Amount collected so far */
  collectedAmount: bigint;
  /** Number of members who have contributed */
  contributorsCount: number;
  /** Expected number of contributors */
  expectedContributors: number;
  /** Member selected to receive funds this round */
  selectedMember: Option<Address>;
  /** Amount distributed to selected member */
  distributedAmount: bigint;
  /** Interest rate for this round (basis points) - for auction method */
  interestRate: Option<number>;
  /** Interest amount to be distributed to other members */
  interestAmount: bigint;
  /** Random seed used for selection (for random method) */
  randomSeed: Option<ReadonlyUint8Array>;
  /** Switchboard randomness account for VRF */
  randomnessAccount: Option<Address>;
  /** Randomness status for tracking VRF lifecycle */
  randomnessStatus: RandomnessStatus;
  /** Slot when randomness was committed */
  committedSlot: Option<bigint>;
  /** List of members who contributed this round */
  contributors: Array<Address>;
  /** Whether round is finalized */
  finalized: boolean;
  /** Reserved space for future upgrades */
  reserved: ReadonlyUint8Array;
};

export type RoundArgs = {
  /** The group this round belongs to */
  group: Address;
  /** Round number (0-indexed) */
  roundNumber: number;
  /** Current status of the round */
  status: RoundStatusArgs;
  /** When the round started */
  startTime: number | bigint;
  /** When the round should end */
  endTime: number | bigint;
  /** Target amount to collect this round */
  targetAmount: number | bigint;
  /** Amount collected so far */
  collectedAmount: number | bigint;
  /** Number of members who have contributed */
  contributorsCount: number;
  /** Expected number of contributors */
  expectedContributors: number;
  /** Member selected to receive funds this round */
  selectedMember: OptionOrNullable<Address>;
  /** Amount distributed to selected member */
  distributedAmount: number | bigint;
  /** Interest rate for this round (basis points) - for auction method */
  interestRate: OptionOrNullable<number>;
  /** Interest amount to be distributed to other members */
  interestAmount: number | bigint;
  /** Random seed used for selection (for random method) */
  randomSeed: OptionOrNullable<ReadonlyUint8Array>;
  /** Switchboard randomness account for VRF */
  randomnessAccount: OptionOrNullable<Address>;
  /** Randomness status for tracking VRF lifecycle */
  randomnessStatus: RandomnessStatusArgs;
  /** Slot when randomness was committed */
  committedSlot: OptionOrNullable<number | bigint>;
  /** List of members who contributed this round */
  contributors: Array<Address>;
  /** Whether round is finalized */
  finalized: boolean;
  /** Reserved space for future upgrades */
  reserved: ReadonlyUint8Array;
};

export function getRoundEncoder(): Encoder<RoundArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['group', getAddressEncoder()],
      ['roundNumber', getU8Encoder()],
      ['status', getRoundStatusEncoder()],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['targetAmount', getU64Encoder()],
      ['collectedAmount', getU64Encoder()],
      ['contributorsCount', getU8Encoder()],
      ['expectedContributors', getU8Encoder()],
      ['selectedMember', getOptionEncoder(getAddressEncoder())],
      ['distributedAmount', getU64Encoder()],
      ['interestRate', getOptionEncoder(getU16Encoder())],
      ['interestAmount', getU64Encoder()],
      ['randomSeed', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['randomnessAccount', getOptionEncoder(getAddressEncoder())],
      ['randomnessStatus', getRandomnessStatusEncoder()],
      ['committedSlot', getOptionEncoder(getU64Encoder())],
      ['contributors', getArrayEncoder(getAddressEncoder())],
      ['finalized', getBooleanEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: ROUND_DISCRIMINATOR })
  );
}

export function getRoundDecoder(): Decoder<Round> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['group', getAddressDecoder()],
    ['roundNumber', getU8Decoder()],
    ['status', getRoundStatusDecoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['targetAmount', getU64Decoder()],
    ['collectedAmount', getU64Decoder()],
    ['contributorsCount', getU8Decoder()],
    ['expectedContributors', getU8Decoder()],
    ['selectedMember', getOptionDecoder(getAddressDecoder())],
    ['distributedAmount', getU64Decoder()],
    ['interestRate', getOptionDecoder(getU16Decoder())],
    ['interestAmount', getU64Decoder()],
    ['randomSeed', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['randomnessAccount', getOptionDecoder(getAddressDecoder())],
    ['randomnessStatus', getRandomnessStatusDecoder()],
    ['committedSlot', getOptionDecoder(getU64Decoder())],
    ['contributors', getArrayDecoder(getAddressDecoder())],
    ['finalized', getBooleanDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getRoundCodec(): Codec<RoundArgs, Round> {
  return combineCodec(getRoundEncoder(), getRoundDecoder());
}

export function decodeRound<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Round, TAddress>;
export function decodeRound<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Round, TAddress>;
export function decodeRound<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Round, TAddress> | MaybeAccount<Round, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRoundDecoder()
  );
}

export async function fetchRound<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Round, TAddress>> {
  const maybeAccount = await fetchMaybeRound(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRound<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Round, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRound(maybeAccount);
}

export async function fetchAllRound(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Round>[]> {
  const maybeAccounts = await fetchAllMaybeRound(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRound(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Round>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRound(maybeAccount));
}
