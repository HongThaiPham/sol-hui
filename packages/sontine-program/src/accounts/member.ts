/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getMemberStatusDecoder,
  getMemberStatusEncoder,
  type MemberStatus,
  type MemberStatusArgs,
} from '../types';

export const MEMBER_DISCRIMINATOR = new Uint8Array([
  54, 19, 162, 21, 29, 166, 17, 198,
]);

export function getMemberDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MEMBER_DISCRIMINATOR);
}

export type Member = {
  discriminator: ReadonlyUint8Array;
  /** The member's wallet address */
  member: Address;
  /** The group this member belongs to */
  group: Address;
  /** Member's status in the group */
  status: MemberStatus;
  /** When the member joined the group */
  joinedAt: bigint;
  /** Round number when member received payout (if any) */
  receivedRound: Option<number>;
  /** Amount received by this member */
  amountReceived: bigint;
  /** Total amount contributed by this member */
  totalContributed: bigint;
  /** Number of rounds this member has contributed to */
  roundsContributed: number;
  /** For auction method: member's current bid (interest rate in basis points) */
  currentBid: Option<number>;
  /** For auction method: timestamp of last bid */
  lastBidTime: Option<bigint>;
  /** Member's position in fixed order (if applicable) */
  fixedOrderPosition: Option<number>;
  /** Whether member has contributed to current round */
  contributedCurrentRound: boolean;
  /** Reserved space for future upgrades */
  reserved: ReadonlyUint8Array;
};

export type MemberArgs = {
  /** The member's wallet address */
  member: Address;
  /** The group this member belongs to */
  group: Address;
  /** Member's status in the group */
  status: MemberStatusArgs;
  /** When the member joined the group */
  joinedAt: number | bigint;
  /** Round number when member received payout (if any) */
  receivedRound: OptionOrNullable<number>;
  /** Amount received by this member */
  amountReceived: number | bigint;
  /** Total amount contributed by this member */
  totalContributed: number | bigint;
  /** Number of rounds this member has contributed to */
  roundsContributed: number;
  /** For auction method: member's current bid (interest rate in basis points) */
  currentBid: OptionOrNullable<number>;
  /** For auction method: timestamp of last bid */
  lastBidTime: OptionOrNullable<number | bigint>;
  /** Member's position in fixed order (if applicable) */
  fixedOrderPosition: OptionOrNullable<number>;
  /** Whether member has contributed to current round */
  contributedCurrentRound: boolean;
  /** Reserved space for future upgrades */
  reserved: ReadonlyUint8Array;
};

export function getMemberEncoder(): Encoder<MemberArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['member', getAddressEncoder()],
      ['group', getAddressEncoder()],
      ['status', getMemberStatusEncoder()],
      ['joinedAt', getI64Encoder()],
      ['receivedRound', getOptionEncoder(getU8Encoder())],
      ['amountReceived', getU64Encoder()],
      ['totalContributed', getU64Encoder()],
      ['roundsContributed', getU8Encoder()],
      ['currentBid', getOptionEncoder(getU16Encoder())],
      ['lastBidTime', getOptionEncoder(getI64Encoder())],
      ['fixedOrderPosition', getOptionEncoder(getU8Encoder())],
      ['contributedCurrentRound', getBooleanEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: MEMBER_DISCRIMINATOR })
  );
}

export function getMemberDecoder(): Decoder<Member> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['member', getAddressDecoder()],
    ['group', getAddressDecoder()],
    ['status', getMemberStatusDecoder()],
    ['joinedAt', getI64Decoder()],
    ['receivedRound', getOptionDecoder(getU8Decoder())],
    ['amountReceived', getU64Decoder()],
    ['totalContributed', getU64Decoder()],
    ['roundsContributed', getU8Decoder()],
    ['currentBid', getOptionDecoder(getU16Decoder())],
    ['lastBidTime', getOptionDecoder(getI64Decoder())],
    ['fixedOrderPosition', getOptionDecoder(getU8Decoder())],
    ['contributedCurrentRound', getBooleanDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getMemberCodec(): Codec<MemberArgs, Member> {
  return combineCodec(getMemberEncoder(), getMemberDecoder());
}

export function decodeMember<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Member, TAddress>;
export function decodeMember<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Member, TAddress>;
export function decodeMember<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Member, TAddress> | MaybeAccount<Member, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMemberDecoder()
  );
}

export async function fetchMember<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Member, TAddress>> {
  const maybeAccount = await fetchMaybeMember(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMember<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Member, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMember(maybeAccount);
}

export async function fetchAllMember(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Member>[]> {
  const maybeAccounts = await fetchAllMaybeMember(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMember(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Member>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMember(maybeAccount));
}
