/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAuctionBidDecoder,
  getAuctionBidEncoder,
  type AuctionBid,
  type AuctionBidArgs,
} from '../types';

export const AUCTION_ROUND_DISCRIMINATOR = new Uint8Array([
  193, 35, 83, 13, 200, 67, 45, 96,
]);

export function getAuctionRoundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AUCTION_ROUND_DISCRIMINATOR
  );
}

export type AuctionRound = {
  discriminator: ReadonlyUint8Array;
  /** The group this auction belongs to */
  group: Address;
  /** Round number */
  round: number;
  /** Auction start time */
  startTime: bigint;
  /** Auction end time */
  endTime: bigint;
  /** Current highest bid */
  highestBid: Option<AuctionBid>;
  /** All bids placed (for transparency) */
  bids: Array<AuctionBid>;
  /** Whether auction is finalized */
  finalized: boolean;
  /** Reserved space */
  reserved: ReadonlyUint8Array;
};

export type AuctionRoundArgs = {
  /** The group this auction belongs to */
  group: Address;
  /** Round number */
  round: number;
  /** Auction start time */
  startTime: number | bigint;
  /** Auction end time */
  endTime: number | bigint;
  /** Current highest bid */
  highestBid: OptionOrNullable<AuctionBidArgs>;
  /** All bids placed (for transparency) */
  bids: Array<AuctionBidArgs>;
  /** Whether auction is finalized */
  finalized: boolean;
  /** Reserved space */
  reserved: ReadonlyUint8Array;
};

export function getAuctionRoundEncoder(): Encoder<AuctionRoundArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['group', getAddressEncoder()],
      ['round', getU8Encoder()],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['highestBid', getOptionEncoder(getAuctionBidEncoder())],
      ['bids', getArrayEncoder(getAuctionBidEncoder())],
      ['finalized', getBooleanEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: AUCTION_ROUND_DISCRIMINATOR })
  );
}

export function getAuctionRoundDecoder(): Decoder<AuctionRound> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['group', getAddressDecoder()],
    ['round', getU8Decoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['highestBid', getOptionDecoder(getAuctionBidDecoder())],
    ['bids', getArrayDecoder(getAuctionBidDecoder())],
    ['finalized', getBooleanDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getAuctionRoundCodec(): Codec<AuctionRoundArgs, AuctionRound> {
  return combineCodec(getAuctionRoundEncoder(), getAuctionRoundDecoder());
}

export function decodeAuctionRound<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AuctionRound, TAddress>;
export function decodeAuctionRound<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AuctionRound, TAddress>;
export function decodeAuctionRound<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AuctionRound, TAddress> | MaybeAccount<AuctionRound, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAuctionRoundDecoder()
  );
}

export async function fetchAuctionRound<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AuctionRound, TAddress>> {
  const maybeAccount = await fetchMaybeAuctionRound(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuctionRound<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AuctionRound, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAuctionRound(maybeAccount);
}

export async function fetchAllAuctionRound(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AuctionRound>[]> {
  const maybeAccounts = await fetchAllMaybeAuctionRound(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAuctionRound(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AuctionRound>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAuctionRound(maybeAccount));
}
