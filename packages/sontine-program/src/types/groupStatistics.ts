/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getAuctionConfigDecoder,
  getAuctionConfigEncoder,
  getCycleDurationDecoder,
  getCycleDurationEncoder,
  getGroupStatusDecoder,
  getGroupStatusEncoder,
  getSelectionMethodDecoder,
  getSelectionMethodEncoder,
  type AuctionConfig,
  type AuctionConfigArgs,
  type CycleDuration,
  type CycleDurationArgs,
  type GroupStatus,
  type GroupStatusArgs,
  type SelectionMethod,
  type SelectionMethodArgs,
} from '.';

/** Comprehensive group statistics */
export type GroupStatistics = {
  groupId: bigint;
  admin: Address;
  selectionMethod: SelectionMethod;
  status: GroupStatus;
  maxMembers: number;
  currentMembers: number;
  minMembersToStart: number;
  contributionAmount: bigint;
  cycleDuration: CycleDuration;
  createdAt: bigint;
  startedAt: Option<bigint>;
  currentRound: number;
  totalRounds: number;
  totalCollected: bigint;
  totalDistributed: bigint;
  isPaused: boolean;
  vault: Address;
  fixedOrder: Array<Address>;
  auctionConfig: Option<AuctionConfig>;
};

export type GroupStatisticsArgs = {
  groupId: number | bigint;
  admin: Address;
  selectionMethod: SelectionMethodArgs;
  status: GroupStatusArgs;
  maxMembers: number;
  currentMembers: number;
  minMembersToStart: number;
  contributionAmount: number | bigint;
  cycleDuration: CycleDurationArgs;
  createdAt: number | bigint;
  startedAt: OptionOrNullable<number | bigint>;
  currentRound: number;
  totalRounds: number;
  totalCollected: number | bigint;
  totalDistributed: number | bigint;
  isPaused: boolean;
  vault: Address;
  fixedOrder: Array<Address>;
  auctionConfig: OptionOrNullable<AuctionConfigArgs>;
};

export function getGroupStatisticsEncoder(): Encoder<GroupStatisticsArgs> {
  return getStructEncoder([
    ['groupId', getU64Encoder()],
    ['admin', getAddressEncoder()],
    ['selectionMethod', getSelectionMethodEncoder()],
    ['status', getGroupStatusEncoder()],
    ['maxMembers', getU8Encoder()],
    ['currentMembers', getU8Encoder()],
    ['minMembersToStart', getU8Encoder()],
    ['contributionAmount', getU64Encoder()],
    ['cycleDuration', getCycleDurationEncoder()],
    ['createdAt', getI64Encoder()],
    ['startedAt', getOptionEncoder(getI64Encoder())],
    ['currentRound', getU8Encoder()],
    ['totalRounds', getU8Encoder()],
    ['totalCollected', getU64Encoder()],
    ['totalDistributed', getU64Encoder()],
    ['isPaused', getBooleanEncoder()],
    ['vault', getAddressEncoder()],
    ['fixedOrder', getArrayEncoder(getAddressEncoder())],
    ['auctionConfig', getOptionEncoder(getAuctionConfigEncoder())],
  ]);
}

export function getGroupStatisticsDecoder(): Decoder<GroupStatistics> {
  return getStructDecoder([
    ['groupId', getU64Decoder()],
    ['admin', getAddressDecoder()],
    ['selectionMethod', getSelectionMethodDecoder()],
    ['status', getGroupStatusDecoder()],
    ['maxMembers', getU8Decoder()],
    ['currentMembers', getU8Decoder()],
    ['minMembersToStart', getU8Decoder()],
    ['contributionAmount', getU64Decoder()],
    ['cycleDuration', getCycleDurationDecoder()],
    ['createdAt', getI64Decoder()],
    ['startedAt', getOptionDecoder(getI64Decoder())],
    ['currentRound', getU8Decoder()],
    ['totalRounds', getU8Decoder()],
    ['totalCollected', getU64Decoder()],
    ['totalDistributed', getU64Decoder()],
    ['isPaused', getBooleanDecoder()],
    ['vault', getAddressDecoder()],
    ['fixedOrder', getArrayDecoder(getAddressDecoder())],
    ['auctionConfig', getOptionDecoder(getAuctionConfigDecoder())],
  ]);
}

export function getGroupStatisticsCodec(): Codec<
  GroupStatisticsArgs,
  GroupStatistics
> {
  return combineCodec(getGroupStatisticsEncoder(), getGroupStatisticsDecoder());
}
