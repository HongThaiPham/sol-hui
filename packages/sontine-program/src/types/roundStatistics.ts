/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getRoundStatusDecoder,
  getRoundStatusEncoder,
  type RoundStatus,
  type RoundStatusArgs,
} from '.';

/** Round statistics with additional computed fields */
export type RoundStatistics = {
  roundNumber: number;
  group: Address;
  status: RoundStatus;
  startTime: bigint;
  endTime: bigint;
  targetAmount: bigint;
  collectedAmount: bigint;
  contributorsCount: number;
  expectedContributors: number;
  selectedMember: Option<Address>;
  distributedAmount: bigint;
  interestRate: Option<number>;
  interestAmount: bigint;
  randomSeed: Option<ReadonlyUint8Array>;
  contributors: Array<Address>;
  finalized: boolean;
  remainingTime: bigint;
  completionPercentage: number;
};

export type RoundStatisticsArgs = {
  roundNumber: number;
  group: Address;
  status: RoundStatusArgs;
  startTime: number | bigint;
  endTime: number | bigint;
  targetAmount: number | bigint;
  collectedAmount: number | bigint;
  contributorsCount: number;
  expectedContributors: number;
  selectedMember: OptionOrNullable<Address>;
  distributedAmount: number | bigint;
  interestRate: OptionOrNullable<number>;
  interestAmount: number | bigint;
  randomSeed: OptionOrNullable<ReadonlyUint8Array>;
  contributors: Array<Address>;
  finalized: boolean;
  remainingTime: number | bigint;
  completionPercentage: number;
};

export function getRoundStatisticsEncoder(): Encoder<RoundStatisticsArgs> {
  return getStructEncoder([
    ['roundNumber', getU8Encoder()],
    ['group', getAddressEncoder()],
    ['status', getRoundStatusEncoder()],
    ['startTime', getI64Encoder()],
    ['endTime', getI64Encoder()],
    ['targetAmount', getU64Encoder()],
    ['collectedAmount', getU64Encoder()],
    ['contributorsCount', getU8Encoder()],
    ['expectedContributors', getU8Encoder()],
    ['selectedMember', getOptionEncoder(getAddressEncoder())],
    ['distributedAmount', getU64Encoder()],
    ['interestRate', getOptionEncoder(getU16Encoder())],
    ['interestAmount', getU64Encoder()],
    ['randomSeed', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
    ['contributors', getArrayEncoder(getAddressEncoder())],
    ['finalized', getBooleanEncoder()],
    ['remainingTime', getI64Encoder()],
    ['completionPercentage', getU8Encoder()],
  ]);
}

export function getRoundStatisticsDecoder(): Decoder<RoundStatistics> {
  return getStructDecoder([
    ['roundNumber', getU8Decoder()],
    ['group', getAddressDecoder()],
    ['status', getRoundStatusDecoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['targetAmount', getU64Decoder()],
    ['collectedAmount', getU64Decoder()],
    ['contributorsCount', getU8Decoder()],
    ['expectedContributors', getU8Decoder()],
    ['selectedMember', getOptionDecoder(getAddressDecoder())],
    ['distributedAmount', getU64Decoder()],
    ['interestRate', getOptionDecoder(getU16Decoder())],
    ['interestAmount', getU64Decoder()],
    ['randomSeed', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['contributors', getArrayDecoder(getAddressDecoder())],
    ['finalized', getBooleanDecoder()],
    ['remainingTime', getI64Decoder()],
    ['completionPercentage', getU8Decoder()],
  ]);
}

export function getRoundStatisticsCodec(): Codec<
  RoundStatisticsArgs,
  RoundStatistics
> {
  return combineCodec(getRoundStatisticsEncoder(), getRoundStatisticsDecoder());
}
